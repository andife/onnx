# Copyright (c) ONNX Project Contributors
#
# SPDX-License-Identifier: Apache-2.0

name: Caller Workflow
on: 
  schedule:
    # Run weekly on Monday 00:00
    - cron:  '00 00 * * MON'
  push:
    branches: [main, rel-*]
  pull_request:
    branches: [main, rel-*]
  workflow_dispatch:    

jobs: 
 
  call-workflow-ubuntu_x86:    
    strategy:
      matrix:
        os: ['ubuntu-latest']    
    uses: ./.github/workflows/release_linux_x86_64.yml   
    with:            
      os: "linux_x86_64" 

  call-workflow-ubuntu_aarch64:    
    strategy:
      matrix:
        os: ['ubuntu-latest']    
    uses: ./.github/workflows/release_linux_aarch64.yml
    with:            
      os: "linux_aarch64"      

  call-workflow-win:    
    strategy:
      matrix:
        os: ['windows-latest']    
    uses: ./.github/workflows/release_win_x86_64.yml
    with:      
      os: "win"      

  call-workflow-mac:    
    strategy:
      matrix:
        os: ['mac-latest']    
    uses: ./.github/workflows/release_mac.yml
    with:            
      os: "mac"            

  publish-weekly:
    # Publish weekly pypi, if not all OS variants are succesful, it's ok
    name: Publish Weekly to PyPI 
    runs-on: ubuntu-latest
    needs: [call-workflow-mac, call-workflow-ubuntu_x86, call-workflow-ubuntu_aarch64, call-workflow-win]
    # does not run on forks or pull requests
    if: (github.repository_owner == 'onnx') && (( github.event_name == 'schedule' )) && ((needs.call-workflow-mac.result == 'success') || (needs.call-workflow-ubuntu_x86.result == 'success') || (needs.call-workflow-ubuntu_aarch64.result == 'success'))

    environment:
      name: pypi
      url: https://pypi.org/p/onnx-weekly/
        #  name: pypi # TODO: Does not yet exist, has to be created, see here: https://packaging.python.org/en/latest/guides/publishing-package-distribution-releases-using-github-actions-ci-cd-workflows/
            
    permissions:
      contents: write  # IMPORTANT: mandatory for making GitHub Releases # TODO: check what is needed here?
      id-token: write  # IMPORTANT: mandatory for trusted publishing (which means without api-token or password)

    steps:

      - uses: actions/download-artifact@v4
        with:
          pattern: wheels* # TODO change back to python-wheels?
          path: dist
          merge-multiple: true

      - name: Publish distribution to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          repository-url: https://test.pypi.org/legacy/
          verbose: true     
          print-hash: true




  prepare-release:    
    name: Release-Prep (p.ex. sigstore, pypi)
    runs-on: ubuntu-latest
    needs: [call-workflow-mac, call-workflow-ubuntu_x86, call-workflow-ubuntu_aarch64, call-workflow-win]
    if: (needs.call-workflow-mac.result == 'success') && (needs.call-workflow-ubuntu_x86.result == 'success') && (needs.call-workflow-ubuntu_aarch64.result == 'success')  && (needs.call-workflow-win.result == 'success') 

    permissions:
      contents: write  # IMPORTANT: mandatory for making GitHub Releases
      id-token: write  # IMPORTANT: mandatory for sigstore

    steps:
    
      - uses: actions/download-artifact@v4
        with:
          pattern: wheels* # TODO change back to python-wheels?
          path: dist
          merge-multiple: true

      - name: Sign the dists with Sigstore #/home/runner/work/onnx/onnx/dist/*.tar.gz
        uses: sigstore/gh-action-sigstore-python@v3.0.0
        with:
          inputs: >-            
            /home/runner/work/onnx/onnx/dist/*.whl
  
      #- name: Rename files # to match new file extension https://github.com/sigstore/sigstore-python/blob/main/CHANGELOG.md#changed
      #  run: |
      #    sudo apt install mmv 
      #    mmv "/home/runner/work/onnx/onnx/dist/*.sigstore" /home/runner/work/onnx/onnx/dist/#1.sigstore.json      
      
      - uses: actions/upload-artifact@0b2256b8c012f0828dc542b3febcab082c67f72b
        with:
          name: sigstore-files
          path: |
              /home/runner/work/onnx/onnx/dist/*.sigstore.json

                      
      # TODO
      # at this point, we have the wheels and could check if they are usable by offline testing...continue-on-error: 
      # For more information about environments and required approvals, see "Using environments for deployment." F
      # We can use a separate requirement for deploy

  release: 
    # TODO Add a deployment step for reviewing https://docs.github.com/en/actions/managing-workflow-runs/reviewing-deployments
    name: Release (Publish to pypi and add files to github release)
    runs-on: ubuntu-latest
    needs: [prepare-release]
    if: always() && (needs.prepare-release.result == 'success') && startsWith(github.base_ref, 'rel-') # TODO only if a release is requested

    environment:      
      name: testpypi 
      url: https://pypi.org/p/onnx

    permissions:
      contents: write  # IMPORTANT: mandatory for making GitHub Releases
      id-token: write  # IMPORTANT: mandatory for sigstore     

    steps:

      - uses: actions/download-artifact@v4
        with:
          pattern: wheels* # TODO change back to python-wheels?
          path: dist
          merge-multiple: true

      - name: Publish distribution to PyPI
        if: (github.repository_owner == 'onnx')
        uses: pypa/gh-action-pypi-publish@release/v1
        with:   
          repository-url: https://test.pypi.org/legacy/
          verbose: true     
          print-hash: true  


      - uses: actions/download-artifact@v4
        with:
          pattern: sigstore-files* # TODO change back to python-wheels?
          path: dist
          merge-multiple: true

      # The Release is created by the Github GUI, we only add the files here
      - name: Upload artifact signatures to GitHub Release
        if:  startsWith(github.ref, 'refs/tags/')  # only publish to PyPI on tag pushes # TODO check exact variants
        env:
          GITHUB_TOKEN: ${{ github.token }}
        # Upload to GitHub Release using the `gh` CLI.
        # `dist/` contains the built packages, and the
        # sigstore-produced signatures and certificates.
        run: >-
          gh release upload
          '${{ github.ref_name }}' /home/runner/work/onnx/onnx/dist/**.sigstore.json
          --repo '${{ github.repository }}'  

  
        