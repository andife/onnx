name: LinuxRelease_x86_64

on:
  schedule:
    # Run weekly on Monday 00:00
    - cron:  '00 00 * * MON'
  push:
    branches: [main, rel-*, create_release_directly_from_pipeline]
  pull_request:
    branches: [main, rel-*]
  workflow_dispatch:
  release:
    types: [published]

permissions:  # set top-level default permissions as security best practice
  contents: read

jobs:
  build:
    if: github.event_name != 'pull_request' || startsWith( github.base_ref, 'rel-') || contains( github.event.pull_request.labels.*.name, 'run release CIs')
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.8', '3.9', '3.10', '3.11', '3.12']
        architecture: ['x64']

    steps:
    - uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1
    - name: Checkout submodules
      shell: bash
      run: |
        auth_header="$(git config --local --get http.https://github.com/.extraheader)"
        git submodule sync --recursive
        git -c "http.extraheader=$auth_header" -c protocol.version=2 submodule update --init --force --recursive --depth=1

    - name: Build manylinux2014_x86_64
      uses: docker://quay.io/pypa/manylinux2014_x86_64:latest
      with:
        entrypoint: bash
        args: .github/workflows/manylinux/entrypoint.sh ${{ matrix.python-version }} manylinux2014_x86_64 ${{ github.event_name }}

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@0a5c61591373683505ea898e09a3ea4f39ef2b9c # v5.0.0
      with:
        python-version: ${{ matrix.python-version }}
        architecture: ${{ matrix.architecture }}

    - name: Install python dependencies
      run: |
        python -m pip install -q --upgrade pip
        python -m pip install -q -r requirements-release.txt

    - name: Install protobuf in the GitHub Action environment for testing the wheel
      run: |
        source workflow_scripts/protobuf/build_protobuf_unix.sh $(nproc)

    - name: Test wheel with Python ${{ matrix.python-version }}
      run: |
        python -m pip install dist/*manylinux2014_x86_64.whl
        pytest

    - uses: actions/upload-artifact@a8a3f3ad30e3422c9c7b888a15615d19a852ae32
      with:
        name: wheels
        path: dist

    - name: Upload wheel to PyPI weekly
      if: (github.event_name == 'schedule') # Only triggered by weekly event
      run: |
        twine upload --verbose dist/*.whl --repository-url https://upload.pypi.org/legacy/ -u ${{ secrets.ONNXWEEKLY_USERNAME }} -p ${{ secrets.ONNXWEEKLY_TOKEN }}
        TEST_HUB=1 pytest

    - name: Verify ONNX with the latest numpy
      if: ${{ always() }}
      run: |
        python -m pip uninstall -y numpy onnx && python -m pip install numpy
        python -m pip install dist/*manylinux2014_x86_64.whl
        pytest

    - name: Verify ONNX with the latest protobuf
      if: ${{ always() }}
      run: |
        python -m pip uninstall -y protobuf onnx && python -m pip install protobuf
        python -m pip install dist/*manylinux2014_x86_64.whl
        pytest

    - name: Verify ONNX with the minimumly supported packages
      if: ${{ always() }}
      run: |
        python -m pip uninstall -y numpy protobuf onnx && python -m pip install -r requirements-min.txt
        python -m pip install dist/*manylinux2014_x86_64.whl
        pytest

    - name: Verify ONNX with ONNX Runtime PyPI package
      if: matrix.python-version != '3.12'
      run: |
        python -m pip uninstall -y protobuf numpy && python -m pip install -q -r requirements-release.txt
        python -m pip install -q onnxruntime
        export ORT_MAX_IR_SUPPORTED_VERSION=9
        export ORT_MAX_ML_OPSET_SUPPORTED_VERSION=3
        export ORT_MAX_ONNX_OPSET_SUPPORTED_VERSION=19
        pytest


  release:
    name: Release
    runs-on: ubuntu-latest
    if: github.event_name == 'release' && github.event.action == 'published' && startsWith(github.ref, 'refs/tags/v') 
    needs: [build]
    steps:
      - uses: actions/download-artifact@348754975ef0295bfa2c111cba996120cfdf8a5d
        with:
          name: wheels
          path: dist

      - name: Publish wheels to pypi
        uses: pypa/gh-action-pypi-publish@2f6f737ca5f74c637829c0f5c3acd0e29ea5e8bf
        with:
          password: ${{ secrets.PYPI_API_TOKEN }}

      - name: Create GitHub Release # TODO: notes?
        env:
          GITHUB_TOKEN: ${{ github.token }}
        run: >-
          gh release create ''${{ github.ref_name }}' --repo '${{ github.repository }}' --notes ""

      - name: Upload artifact signatures to GitHub Release # TODO: 1) don't upload wheels?, what is in dist/* ?  2) how is tar.gz/zip added?
      
        env:
          GITHUB_TOKEN: ${{ github.token }}
        # Upload to GitHub Release using the `gh` CLI.
        # `dist/` contains the built packages, and the
        # sigstore-produced signatures and certificates.
        run: >-
          gh release upload '${{ github.ref_name }}' dist/**
          --repo '${{ github.repository }}'